100. Same Tree
Given two binary trees, write a function to check if they are the same or not.

Two binary trees are considered the same if they are structurally identical and the nodes have the same value.

Example 1:

Input:     1         1
          / \       / \
         2   3     2   3

        [1,2,3],   [1,2,3]

Output: true
Example 2:

Input:     1         1
          /           \
         2             2

        [1,2],     [1,null,2]

Output: false
Example 3:

Input:     1         1
          / \       / \
         2   1     1   2

        [1,2,1],   [1,1,2]

Output: false


Hint to solve: Recursively check if the value is same or not. Also both the nodes are none or single node is none

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    
    def checkSameTreeRecursive(self, p, q):
        if p == None and q == None:
            return True
        
        if (p == None and q != None) or (p!= None and q == None) or (p.val != q.val):
            return False
        
        res_left = self.checkSameTreeRecursive(p.left, q.left)
        res_right = self.checkSameTreeRecursive(p.right, q.right)
        
        return (res_left and res_right)
    
    def isSameTree(self, p, q):
        return self.checkSameTreeRecursive(p,q)