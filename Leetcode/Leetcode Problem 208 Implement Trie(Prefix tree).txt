208. Implement Trie (Prefix Tree)
Implement a trie with insert, search, and startsWith methods.

Example:

Trie trie = new Trie();

trie.insert("apple");
trie.search("apple");   // returns true
trie.search("app");     // returns false
trie.startsWith("app"); // returns true
trie.insert("app");   
trie.search("app");     // returns true
Note:

You may assume that all inputs are consist of lowercase letters a-z.
All inputs are guaranteed to be non-empty strings.

Hint To Solve: Every level in the tree would contain 26 nodes(26 characters). 

Language : Java


class TrieNode
{
    private final int MaxCharValue = 26;
    private TrieNode[] CurrentLevelNodes;
    private boolean isBranchEnd;
    
    public TrieNode()
    {
        CurrentLevelNodes = new TrieNode[MaxCharValue];
    }
    
    public boolean ContainsKey(char ch)
    {
        return CurrentLevelNodes[ch - 'a'] != null;
    }
    
    public TrieNode Get(char ch)
    {
        return CurrentLevelNodes[ch-'a'];
    }
    
    public void Put(char ch, TrieNode node)
    {
        CurrentLevelNodes[ch - 'a'] = node;
    }
    
    public void SetBranchEnd()
    {
        isBranchEnd = true;
    }
    
    public boolean checkIfBranchEnded()
    {
        return isBranchEnd;
    }
    
}



class Trie {

    private TrieNode root;
    /** Initialize your data structure here. */
    public Trie() 
    {
        root = new TrieNode();
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) 
    {
        TrieNode currentNode = root;
        for(int i = 0; i<word.length(); ++i)
        {
            char currentCharacter = word.charAt(i);
            if(currentNode.ContainsKey(currentCharacter) == false)
            {
                currentNode.Put(currentCharacter, new TrieNode());
            }
            
            currentNode = currentNode.Get(currentCharacter);
        }
        currentNode.SetBranchEnd();
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) 
    {
        TrieNode currentNode = root;
        for(int i = 0; i<word.length(); ++i)
        {
            char currentCharacter = word.charAt(i);
            if(currentNode.ContainsKey(currentCharacter))
            {
                currentNode = currentNode.Get(currentCharacter);
            }
            else
            {
                return false;
            }
        }
        
        if(currentNode.checkIfBranchEnded())
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) 
    {
        TrieNode currentNode = root;
        for(int i = 0; i<prefix.length(); ++i)
        {
            char currentCharacter = prefix.charAt(i);
            if(currentNode.ContainsKey(currentCharacter))
            {
                currentNode = currentNode.Get(currentCharacter);
            }
            else
            {
                return false;
            }
        }
        
        return true;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */