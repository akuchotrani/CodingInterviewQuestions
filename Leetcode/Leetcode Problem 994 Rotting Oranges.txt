994. Rotting Oranges
In a given grid, each cell can have one of three values:

the value 0 representing an empty cell;
the value 1 representing a fresh orange;
the value 2 representing a rotten orange.
Every minute, any fresh orange that is adjacent (4-directionally) to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange.  If this is impossible, return -1 instead.

 

Example 1:



Input: [[2,1,1],[1,1,0],[0,1,1]]
Output: 4
Example 2:

Input: [[2,1,1],[0,1,1],[1,0,1]]
Output: -1
Explanation:  The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.
Example 3:

Input: [[0,2]]
Output: 0
Explanation:  Since there are already no fresh oranges at minute 0, the answer is just 0.
 

Note:

1 <= grid.length <= 10
1 <= grid[0].length <= 10
grid[i][j] is only 0, 1, or 2.


Hint to solve: Use BFS. Two queue approach.


from collections import deque

class Solution:
    
    def orangesRotting(self, grid: List[List[int]]) -> int:
        queue = collections.deque()
        
        for row in range(0, len(grid)):
            for col in range(0, len(grid[0])):
                if(grid[row][col] == 2):
                    queue.append((row,col))
        
        
        result = -1
        while len(queue) > 0:
            nextLevel = collections.deque()
            while queue:
                rottenOrange = queue.popleft()
                row = rottenOrange[0]
                col = rottenOrange[1]

                if(row > 0 and grid[row-1][col] != 0 and grid[row-1][col] != 2):
                    grid[row-1][col] = 2
                    nextLevel.append((row-1, col))
                    
                if(row < len(grid) - 1 and grid[row+1][col] != 0 and grid[row + 1][col] != 2):
                    grid[row+1][col] = 2
                    nextLevel.append((row + 1, col))
                
                if(col > 0 and grid[row][col - 1] != 0 and grid[row][col - 1] != 2):
                    grid[row][col - 1] = 2
                    nextLevel.append((row, col - 1 ))
                
                if(col < len(grid[0]) - 1 and grid[row][col + 1] != 0 and grid[row][col + 1] != 2):
                    grid[row][col + 1] = 2
                    nextLevel.append((row, col + 1))
            
            queue = nextLevel
            result += 1
        
        for row in range(0, len(grid)):
            for col in range(0, len(grid[0])):
                if(grid[row][col] == 1):
                    return -1
        
        return max(0,result)