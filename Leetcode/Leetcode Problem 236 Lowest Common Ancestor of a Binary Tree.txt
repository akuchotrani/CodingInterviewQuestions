236. Lowest Common Ancestor of a Binary Tree
Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”

Given the following binary tree:  root = [3,5,1,6,2,0,8,null,null,7,4]

Example 1:

Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output: 3
Explanation: The LCA of nodes 5 and 1 is 3.
Example 2:

Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
Output: 5
Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.
 

Note:
All of the nodes' values will be unique.
p and q are different and both values will exist in the binary tree.



Hint to solve: recursive solution.
1) Check if the root is null then return null
2) Check if the current root node matches any left or right node then just return that node.
3) Recrusively call LCA for left and right child.
4) If both the LCA calls return some value then the current node is the LCA. Since both the P and Q were found in different branches of the root.
5) If one of them is null and other one is not null then we already got the LCA. Return whichever is not null. 


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode LowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) 
    {
        if(root == null)
        {
            return null;
        }
        if(root == p || root == q)
        {
            return root;
        }
		
        TreeNode left = LowestCommonAncestor(root.left, p, q);
        TreeNode right = LowestCommonAncestor(root.right,p,q);
        if(left == null && right == null)
        {
            return null;
        }
        else if(left !=null && right != null)
        {
            return root;
        }
        return left != null? left:right;
    }
}