207. Course Schedule
There are a total of n courses you have to take, labeled from 0 to n-1.

Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]

Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?

Example 1:

Input: 2, [[1,0]] 
Output: true
Explanation: There are a total of 2 courses to take. 
             To take course 1 you should have finished course 0. So it is possible.
Example 2:

Input: 2, [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
             To take course 1 you should have finished course 0, and to take course 0 you should
             also have finished course 1. So it is impossible.
Note:

The input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.
You may assume that there are no duplicate edges in the input prerequisites.



Hint to solve: Topological sort

class Solution:
    
    def dfs(self, currentCourse, visitingCourse):
        
        #If the course if already completed no need to explore
        if currentCourse in self.completedCourse:
            return True
        
        #If the course need to be completed is already in the call stack for prereq then it can't be completed
        if currentCourse in visitingCourse:
            return False
        else:
            visitingCourse.add(currentCourse)
        
        #If the visiting node does not have any prereq then it would not be in the dictionary
        if currentCourse in self.requisiteDictionary:
            for prereq in self.requisiteDictionary[currentCourse]:
                res = self.dfs(prereq, visitingCourse)
                if res == False:
                    return False
        self.completedCourse.add(currentCourse)
        
        return True
        
    
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        
        self.requisiteDictionary = {}
        
        for requisite in prerequisites:
            if requisite[1] in self.requisiteDictionary:
                self.requisiteDictionary[requisite[1]].append(requisite[0])
            else:
                self.requisiteDictionary[requisite[1]] = [requisite[0]]
                
        self.completedCourse = set()
        
        for course in self.requisiteDictionary:
            result = self.dfs(course, set())
            if result == False:
                return False
        
        return True