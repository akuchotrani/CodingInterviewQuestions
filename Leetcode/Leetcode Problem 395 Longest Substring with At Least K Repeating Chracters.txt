395. Longest Substring with At Least K Repeating Characters
Find the length of the longest substring T of a given string (consists of lowercase letters only) such that every character in T appears no less than k times.

Example 1:

Input:
s = "aaabb", k = 3

Output:
3

The longest substring is "aaa", as 'a' is repeated 3 times.
Example 2:

Input:
s = "ababbc", k = 2

Output:
5

The longest substring is "ababb", as 'a' is repeated 2 times and 'b' is repeated 3 times.



Hint to solve: count the occurance of each character in the string if it's less than required then split the string into different parts since the answer could not contain that specific alphabet.
Repeat the process until the stack is empty.

class Solution:
    def longestSubstring(self, s: str, k: int) -> int:
        stack = []
        stack.append(s)
        answer = 0
        foundStringFlag = True
        
        while len(stack) > 0:
            currentSubstring = stack.pop()
            for uniqueAlpha in set(currentSubstring):
                if currentSubstring.count(uniqueAlpha) < k:
                    stack.extend([sub_str for sub_str in currentSubstring.split(uniqueAlpha) ])
                    foundStringFlag = False
                    break
            
            if foundStringFlag:
                answer = max(answer, len(currentSubstring))
            else:
                foundStringFlag = True
        
        return answer