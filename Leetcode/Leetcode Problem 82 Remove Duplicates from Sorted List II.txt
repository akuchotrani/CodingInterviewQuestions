82. Remove Duplicates from Sorted List II
Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.

Example 1:

Input: 1->2->3->3->4->4->5
Output: 1->2->5
Example 2:

Input: 1->1->1->2->3
Output: 2->3
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */

public class Solution {
    public ListNode DeleteDuplicates(ListNode head) 
    {
        if(head == null)
            return head;
        
        ListNode previous = null;
        ListNode current = head;
        
        while(current != null && current.next != null)
        {
            //We found a duplicate value
            if(current.val == current.next.val)
            {
                //Loop thorough all the duplicate nodes.
                int duplicateValue = current.val;
                while(current != null && current.val == duplicateValue)
                {
                    current = current.next;
                }
                
                //Remove the intermediate nodes which are duplicate
                if(previous != null)
                {
                    previous.next = current;
                }
                else
                {
                    //Check for the edge case when the first few nodes are duplicate nodes.
                    head = current;
                }
            }
            else
            {
                previous = current;
                current = current.next;
            }
        }
        return head;
    }
}