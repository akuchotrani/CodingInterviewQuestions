2. Add Two Numbers
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode AddTwoNumbers(ListNode l1, ListNode l2)
    {
        int carry = 0;
        ListNode head = null;
        ListNode currentNode = null;
        while(l1 != null || l2 != null)
        {
            int total = carry;
            if(l1 != null)
            {
                total += l1.val;
                l1 = l1.next;
            }
            if(l2 != null)
            {
                total += l2.val;
                l2 = l2.next;
            }

            if(total > 9)
                carry = 1;
            else
                carry = 0;

            ListNode createdNode = new ListNode(total%10);
            if(head == null)
            {
                head = createdNode;
                currentNode = createdNode;
            }
            else
            {
                currentNode.next = createdNode;
                currentNode = createdNode;
            }
        }

        if(carry == 1)
        {
            ListNode createdNode = new ListNode(1);
            currentNode.next = createdNode;
            currentNode = createdNode;
        }

        return head;

    }
}
