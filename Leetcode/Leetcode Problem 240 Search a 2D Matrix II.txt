240. Search a 2D Matrix II
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted in ascending from left to right.
Integers in each column are sorted in ascending from top to bottom.
Example:

Consider the following matrix:

[
  [1,   4,  7, 11, 15],
  [2,   5,  8, 12, 19],
  [3,   6,  9, 16, 22],
  [10, 13, 14, 17, 24],
  [18, 21, 23, 26, 30]
]
Given target = 5, return true.

Given target = 20, return false.


Hint to solve: Search from bottomLeftCell or topRightCell.


class Solution:
    
    def bottomLeftSearch(self, matrix, target):
        if len(matrix) == 0 or len(matrix[0]) == 0:
            return False
        total_rows = len(matrix)
        total_cols = len(matrix[0])
        
        row = total_rows - 1
        col = 0
        
        while row >= 0 and col < total_cols:
            if matrix[row][col] == target:
                return True
            
            if matrix[row][col] > target:
                row -= 1
            elif matrix[row][col] < target:
                col += 1
        return False
    
    def topRightSearch(self, matrix, target):
        if len(matrix) == 0 or len(matrix[0]) == 0:
            return False
        total_rows = len(matrix)
        total_cols = len(matrix[0])
        
        row = 0
        col = total_cols - 1
        
        while row < total_rows and col >= 0:
            if matrix[row][col] == target:
                return True
            
            if matrix[row][col] > target:
                col -= 1
            elif matrix[row][col] < target:
                row += 1
        return False
            
        
    
    def searchMatrix(self, matrix, target):
        # return self.topRightSearch(matrix,target)
        return self.bottomLeftSearch(matrix, target)