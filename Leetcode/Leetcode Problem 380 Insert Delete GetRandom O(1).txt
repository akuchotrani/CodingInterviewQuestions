Leetcode problem 380 Insert delete Get Random O(1)

Design a data structure that supports all following operations in average O(1) time.

insert(val): Inserts an item val to the set if not already present.
remove(val): Removes an item val from the set if present.
getRandom: Returns a random element from current set of elements. Each element must have the same probability of being returned.
Example:

// Init an empty set.
RandomizedSet randomSet = new RandomizedSet();

// Inserts 1 to the set. Returns true as 1 was inserted successfully.
randomSet.insert(1);

// Returns false as 2 does not exist in the set.
randomSet.remove(2);

// Inserts 2 to the set, returns true. Set now contains [1,2].
randomSet.insert(2);

// getRandom should return either 1 or 2 randomly.
randomSet.getRandom();

// Removes 1 from the set, returns true. Set now contains [2].
randomSet.remove(1);

// 2 was already in the set, so return false.
randomSet.insert(2);

// Since 2 is the only number in the set, getRandom always return 2.
randomSet.getRandom();


Hint to solve question: Use dictionary and array as the underlying datastructure.
dictionary[key] = value
key: actual number 
value: index of the element(size of the array)

When removing element swap the element at the index with the last element.
Also update the dictionary.
Delete the element from dictionary
Delete the last element from the array.

class RandomizedSet:

    def __init__(self):
        self.myArray = []
        self.myDict = {}
        

    def insert(self, val: int) -> bool:
        if(val not in self.myDict):
            self.myDict[val] = len(self.myArray)
            self.myArray.insert(len(self.myArray),val)
            #print("True")
            return True
        else:
            #print("False")
            return False
        

    def remove(self, val: int) -> bool:
        if(val in self.myDict):
            index = self.myDict[val]
            totalElements = len(self.myArray) - 1
            
            self.myArray[index] = self.myArray[totalElements]
            self.myDict[self.myArray[index]] = index
            del self.myArray[-1]
            del self.myDict[val]
            #print("True")
            return True
        else:
            #print("False")
            return False
        

    def getRandom(self) -> int:
        #print("Null")
        return self.myArray[random.randint(0,len(self.myArray)-1)]
        
        


# Your RandomizedSet object will be instantiated and called as such:
# obj = RandomizedSet()
# param_1 = obj.insert(val)
# param_2 = obj.remove(val)
# param_3 = obj.getRandom()