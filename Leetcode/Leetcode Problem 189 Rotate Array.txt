189. Rotate Array

Given an array, rotate the array to the right by k steps, where k is non-negative.

Example 1:

Input: [1,2,3,4,5,6,7] and k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]
Example 2:

Input: [-1,-100,3,99] and k = 2
Output: [3,99,-1,-100]
Explanation: 
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]
Note:

Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.
Could you do it in-place with O(1) extra space?


Hint to solve: Calculate K and Reverse the array three times.
k = k%nums.Length
1->2->3->4->5->6->7 and k = 3
first reverse : 0 to nums.Length - k - 1 (first part reverse: 4->3->2->1->5->6->7)
second reverse : nums.Length - k to nums.Length - 1 (second part reverse: 4->3->2->1->7->6->5) 
thrid reverse : 0 to nums.Length - 1 (full reverse: 5->6->7->1->2->3->4)


public class Solution {
    public void Rotate(int[] nums, int k)
    {
        k = k%nums.Length;
        //Console.WriteLine("K = "+ k);
        
        if(k == 0 || nums.Length < 2)
            return;
        
        _Reverse(ref nums,0,nums.Length-k-1);
        //_Print(nums);
        _Reverse(ref nums,nums.Length-k,nums.Length - 1);
        //_Print(nums);
        _Reverse(ref nums,0,nums.Length - 1);
        
        
    }
    
    private void _Reverse(ref int[] nums, int start, int end)
    {
        while(start<end)
        {
            int temp = nums[start];
            nums[start] = nums[end];
            nums[end] = temp;
            
            start += 1;
            end -= 1;
        }
    }
    
    private void _Print(int[] nums)
    {
        foreach(var x in nums)
            Console.Write(x +" ");
        Console.WriteLine();
    }
}