208. Implement Trie (Prefix Tree)
Implement a trie with insert, search, and startsWith methods.

Example:

Trie trie = new Trie();

trie.insert("apple");
trie.search("apple");   // returns true
trie.search("app");     // returns false
trie.startsWith("app"); // returns true
trie.insert("app");   
trie.search("app");     // returns true
Note:

You may assume that all inputs are consist of lowercase letters a-z.
All inputs are guaranteed to be non-empty strings.


Hint to solve:
Create a custom class with dictionary containing char as key and trie node & boolean flag to maintain end of the node.

public class TrieNode
{
    public Dictionary<char, TrieNode> childrens;
    public bool isEndOfWord;

    public TrieNode()
    {
        childrens = new Dictionary<char,TrieNode>();
        isEndOfWord = false;
    }
}

public class Trie 
{
    TrieNode root;
    
    /** Initialize your data structure here. */
    public Trie() 
    {
        root = new TrieNode();
    }
    
    /** Inserts a word into the trie. */
    public void Insert(string word) 
    {
        TrieNode currentNode = root;
        for(int i = 0; i<word.Length; ++i)
        {
            if(currentNode.childrens.ContainsKey(word[i]))
            {
                currentNode = currentNode.childrens[word[i]];
            }
            else
            {
                TrieNode node = new TrieNode();
                currentNode.childrens.Add(word[i],node);
                currentNode = node;
            }
        }
        currentNode.isEndOfWord = true;
    }
    
    /** Returns if the word is in the trie. */
    public bool Search(string word) 
    {
        TrieNode currentNode = root;
        for(int i = 0; i<word.Length; ++i)
        {
            if(currentNode == null)
            {
                Console.WriteLine("Last node reached. No further characters left in tree");
                return false;
            }
            
            if(currentNode.childrens.ContainsKey(word[i]))
            {
                currentNode = currentNode.childrens[word[i]];
            }
            else
            {
                Console.WriteLine("There was mismatch with the character");
                return false;
            }
        }
        
        //Check if this was the end of trie tree branch.
        return currentNode.isEndOfWord;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public bool StartsWith(string prefix) 
    {
        TrieNode currentNode = root;
        for(int i = 0; i<prefix.Length; ++i)
        {
            if(currentNode == null)
            {
                Console.WriteLine("Last node reached. No further characters left in tree");
                return false;
            }
            
            if(currentNode.childrens.ContainsKey(prefix[i]))
            {
                currentNode = currentNode.childrens[prefix[i]];
            }
            else
            {
                Console.WriteLine("There was mismatch with the character");
                return false;
            }
        }
        //We don't need to check whether the word completed.
        return true;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.Insert(word);
 * bool param_2 = obj.Search(word);
 * bool param_3 = obj.StartsWith(prefix);
 */