146. LRU Cache
Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.

get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.

The cache is initialized with a positive capacity.

Follow up:
Could you do both operations in O(1) time complexity?

Example:

LRUCache cache = new LRUCache( 2 /* capacity */ );

cache.put(1, 1);
cache.put(2, 2);
cache.get(1);       // returns 1
cache.put(3, 3);    // evicts key 2
cache.get(2);       // returns -1 (not found)
cache.put(4, 4);    // evicts key 1
cache.get(1);       // returns -1 (not found)
cache.get(3);       // returns 3
cache.get(4);       // returns 4


Hint to solve: Use doubly linked list with hashmap


class Node:
    def __init__(self):
        self.prev = None
        self.next = None
        self.key = None
        self.val = None

class LRUCache:

    def __init__(self, capacity: int):
        self.capacity = capacity
        self.hashmap = {}
        self.head = Node()
        self.tail = Node()
        
        self.head.next = self.tail
        self.tail.prev = self.head
        

    def get(self, key: int) -> int:
        #self.debugPrint()
        if key in self.hashmap:
            value = self.hashmap[key].val
            self.RemoveNode(key)
            self.InsertNodeAtBeginning(key,value)
            return value
        else:
            return -1

    def put(self, key: int, value: int) -> None:
        if key in self.hashmap:
            self.RemoveNode(key)
            self.InsertNodeAtBeginning(key,value)
        else:
            if self.capacity == 0:
                lastNode = self.tail.prev
                self.RemoveNode(lastNode.key)

            self.InsertNodeAtBeginning(key, value)
        
    
    def RemoveNode(self, key):
        currNode = self.hashmap[key]
        prevNode = currNode.prev
        nextNode = currNode.next
        
        prevNode.next = nextNode
        nextNode.prev = prevNode
        
        del self.hashmap[key]
        self.capacity += 1
    
    def InsertNodeAtBeginning(self, key, val):
        createdNode = Node()
        createdNode.key = key
        createdNode.val = val
        frontNode = self.head.next
        
        self.head.next = createdNode
        createdNode.prev = self.head
        createdNode.next = frontNode
        frontNode.prev = createdNode
        
        self.hashmap[key] = createdNode
        self.capacity -= 1
    
    def debugPrint(self):
        ptr = self.head.next
        while(ptr.next != None):
            print(F"({ptr.key},{ptr.val})->", end=" ")
            ptr = ptr.next

# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)