92. Reverse Linked List II
Reverse a linked list from position m to n. Do it in one-pass.

Note: 1 ≤ m ≤ n ≤ length of list.

Example:

Input: 1->2->3->4->5->NULL, m = 2, n = 4
Output: 1->4->3->2->5->NULL


Hint to solve: Remeber to create a dummy node. This will help with the edge case when the rage is equal to 1-len(list)


# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def reverseBetween(self, head: ListNode, m: int, n: int) -> ListNode:
        
        dummyNode = ListNode(0)
        dummyNode.next = head
        
        before = dummyNode
        pre = dummyNode
        
        for _ in range(1,m):
            before = before.next
            
        start = before.next
        current = start
        for _ in range(n-m+1):
            nextNode = current.next
            current.next = pre
            pre = current
            current = nextNode
        
        before.next = pre
        start.next = current
        
        return dummyNode.next