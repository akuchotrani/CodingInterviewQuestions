Given two binary strings a and b, return their sum as a binary string.

 

Example 1:

Input: a = "11", b = "1"
Output: "100"
Example 2:

Input: a = "1010", b = "1011"
Output: "10101"
 

Constraints:

1 <= a.length, b.length <= 104
a and b consist only of '0' or '1' characters.
Each string does not contain leading zeros except for the zero itself.

Solution Simple below using string manipulation:
Alternate solution: convert both numbers to decimal > add them > convert back to binary
Alternate solution : perform XOR a^b and calculate carry array separately carry = a&b << 1

O(N+M)


class Solution:
    def addBinary(self, a: str, b: str) -> str:
        lengthA = len(a)
        lengthB = len(b)
        carry = 0
        answer = ""
        
        while lengthA != 0 or lengthB != 0:
            x = 0
            y = 0
            if(lengthA > 0):
                x = a[lengthA - 1]
                lengthA -= 1
            if(lengthB > 0):
                y = b[lengthB - 1]
                lengthB -= 1
                
            total = int(x) + int(y) + carry
            if(total == 2):
                total = 0
                carry = 1
            elif(total == 3):
                total = 1
                carry = 1
            else:
                carry = 0
            
            answer += str(total)
        
        if(carry == 1):
            answer += str(carry)
                
        return answer[::-1]


