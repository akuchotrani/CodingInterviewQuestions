124. Binary Tree Maximum Path Sum
Given a non-empty binary tree, find the maximum path sum.

For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root.

Example 1:

Input: [1,2,3]

       1
      / \
     2   3

Output: 6
Example 2:

Input: [-10,9,20,null,null,15,7]

   -10
   / \
  9  20
    /  \
   15   7

Output: 42

Hint to solve: Use recrusive calls to left and right. Keep track of max. 

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    
    def calculatePathSumRecursive(self, root)->int:
        if root is None:
            return 0
        
        left = max(0, self.calculatePathSumRecursive(root.left))
        right = max(0, self.calculatePathSumRecursive(root.right))
        
        currentMax = left + right + root.val
        self.maxSum = max(self.maxSum, currentMax)
        
        return max(left,right) + root.val
    
    
    def maxPathSum(self, root: TreeNode) -> int:
        self.maxSum = -sys.maxsize
        
        self.calculatePathSumRecursive(root)
        
        return self.maxSum