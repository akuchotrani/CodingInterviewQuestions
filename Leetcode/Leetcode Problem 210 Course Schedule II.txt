210. Course Schedule II
There are a total of n courses you have to take, labeled from 0 to n-1.

Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]

Given the total number of courses and a list of prerequisite pairs, return the ordering of courses you should take to finish all courses.

There may be multiple correct orders, you just need to return one of them. If it is impossible to finish all courses, return an empty array.

Example 1:

Input: 2, [[1,0]] 
Output: [0,1]
Explanation: There are a total of 2 courses to take. To take course 1 you should have finished   
             course 0. So the correct course order is [0,1] .
Example 2:

Input: 4, [[1,0],[2,0],[3,1],[3,2]]
Output: [0,1,2,3] or [0,2,1,3]
Explanation: There are a total of 4 courses to take. To take course 3 you should have finished both     
             courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0. 
             So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3] .
Note:

The input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.
You may assume that there are no duplicate edges in the input prerequisites.

Hint to solve: Topological sort


class Solution:
    
    def dfs(self, currentCourse, visitingCourse):
        
        #If the course if already completed no need to explore
        if currentCourse in self.completedCourse:
            return True
        
        #If the course need to be completed is already in the call stack for prereq then it can't be completed
        if currentCourse in visitingCourse:
            return False
        else:
            visitingCourse.add(currentCourse)
        
        #If the visiting node does not have any prereq then it would not be in the dictionary
        if currentCourse in self.requisiteDictionary:
            for prereq in self.requisiteDictionary[currentCourse]:
                res = self.dfs(prereq, visitingCourse)
                if res == False:
                    return False
        self.completedCourse.add(currentCourse)
        self.order.append(currentCourse)
        
        return True
        
    
    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:
        
        if len(prerequisites) == 0:
            temp = []
            for i in range(numCourses-1,-1,-1):
                temp.append(i)
            return temp
        
        self.requisiteDictionary = {}
        
        for requisite in prerequisites:
            if requisite[1] in self.requisiteDictionary:
                self.requisiteDictionary[requisite[1]].append(requisite[0])
            else:
                self.requisiteDictionary[requisite[1]] = [requisite[0]]
                
        self.completedCourse = set()
        self.order = []
        
        for course in range(0,numCourses):
            result = self.dfs(course, set())
            if result == False:
                return []
        
        self.order.reverse()
        return self.order