340. Longest Substring with At Most K Distinct Characters

Given a string, find the length of the longest substring T that contains at most k distinct characters.

Given a string, find the length of the longest substring T that contains at most k distinct characters.

Example 1:

Input: s = "eceba", k = 2
Output: 3
Explanation: T is "ece" which its length is 3.
Example 2:

Input: s = "aa", k = 1
Output: 2
Explanation: T is "aa" which its length is 2.


Hint to solve: Use dictionary to count the frequency of the characters.
Use two pointers to traverse through the string.
Keep reducing the freq of chars when the length of the dictionary has reached K and we want to add one more element.
If the freq becomes zero than remove the alphabet from the dictionary.


class Solution:
    def lengthOfLongestSubstringKDistinct(self, s: str, k: int) -> int:
        
        if k == 0:
            return 0
        
        leftPtr = 0
        rightPtr = 0
        uniqueAlpha = {}
        maxLength = 0
        while rightPtr != len(s):
            alpha = s[rightPtr]
            if alpha in uniqueAlpha:
                uniqueAlpha[alpha] += 1
                rightPtr += 1
            else:
                if len(uniqueAlpha) < k:
                    uniqueAlpha[alpha] = 1
                    rightPtr += 1
                else:
                    currentLength = rightPtr - leftPtr
                    maxLength = maxLength if maxLength > currentLength else currentLength
                    
                    #Reduce the freq of alpha one at a time.
                    #If the freq reduces to zero then remove that alpha from dict.
                    leftAlpha = s[leftPtr]
                    uniqueAlpha[leftAlpha] -= 1
                    if uniqueAlpha[leftAlpha] == 0:
                        uniqueAlpha.pop(leftAlpha)
                    leftPtr += 1
        #Edge condition when the given string has less than K distinct chars
        #Or at the end of string there were no unique chars.
        if (rightPtr - leftPtr) > maxLength:
            maxLength = rightPtr - leftPtr
        
        return maxLength