103. Binary Tree Zigzag Level Order Traversal
Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its zigzag level order traversal as:
[
  [3],
  [20,9],
  [15,7]
]

from collections import deque
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

Hint to solve: Use BFS and a bool flag for reverse the level of children

class Solution:
    def zigzagLevelOrder(self, root: TreeNode) -> List[List[int]]:
        
        if root == None:
            return []
        
        myQueue = deque()
        myQueue.append(root)
        result = []
        result.append([root.val])
        rotate = True
        
        while len(myQueue) != 0:
            children = deque()
            temp = []
            while(len(myQueue) != 0):
                node = myQueue.popleft()
                if node.left != None:
                    children.append(node.left)
                if node.right != None:
                    children.append(node.right)
            
            myQueue = children.copy()
            if rotate == True:
                while children:
                    temp.append(children.pop().val)
                rotate = False
            else:
                while children:
                    temp.append(children.popleft().val)
                rotate = True
            result.append(temp)
        
        result.pop()
        return result