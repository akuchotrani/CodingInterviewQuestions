448. Find All Numbers Disappeared in an Array
Given an array of integers where 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.

Find all the elements of [1, n] inclusive that do not appear in this array.

Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space.

Example:

Input:
[4,3,2,7,8,2,3,1]

Output:
[5,6]


Hint to solve : Make changes to the original array to achieve O(1) space complexity
Get the absoute value of the element present. Subtract 1 from it so that it become in the range of 0 to N-1
Set the index value of the item to negative value.

Go through the array one more time and check if the value at the index is greater than 0. Thus it's not present.
So add the index of that element to the result.

public class Solution 
{
    public IList<int> FindDisappearedNumbers(int[] nums) 
    {
        List<int> result = new List<int>();
        for(int i = 0; i<nums.Count(); ++i)
        {
            int val = Math.Abs(nums[i]) - 1;
            if(nums[val] > 0)
            {
                nums[val] = -nums[val];
            }
        }
        
        
        for(int i = 0; i<nums.Count(); ++i)
        {
            //Console.WriteLine("final nums: "+ nums[i]);
            if(nums[i] > 0)
            {
                result.Add(i+1);
            }
        }
        
        return result;
    }
}