957. Prison Cells After N Days
There are 8 prison cells in a row, and each cell is either occupied or vacant.

Each day, whether the cell is occupied or vacant changes according to the following rules:

If a cell has two adjacent neighbors that are both occupied or both vacant, then the cell becomes occupied.
Otherwise, it becomes vacant.
(Note that because the prison is a row, the first and the last cells in the row can't have two adjacent neighbors.)

We describe the current state of the prison in the following way: cells[i] == 1 if the i-th cell is occupied, else cells[i] == 0.

Given the initial state of the prison, return the state of the prison after N days (and N such changes described above.)

 

Example 1:

Input: cells = [0,1,0,1,1,0,0,1], N = 7
Output: [0,0,1,1,0,0,0,0]
Explanation: 
The following table summarizes the state of the prison on each day:
Day 0: [0, 1, 0, 1, 1, 0, 0, 1]
Day 1: [0, 1, 1, 0, 0, 0, 0, 0]
Day 2: [0, 0, 0, 0, 1, 1, 1, 0]
Day 3: [0, 1, 1, 0, 0, 1, 0, 0]
Day 4: [0, 0, 0, 0, 0, 1, 0, 0]
Day 5: [0, 1, 1, 1, 0, 1, 0, 0]
Day 6: [0, 0, 1, 0, 1, 1, 0, 0]
Day 7: [0, 0, 1, 1, 0, 0, 0, 0]

Example 2:

Input: cells = [1,0,0,1,0,0,1,0], N = 1000000000
Output: [0,0,1,1,1,1,1,0]
 

Note:

cells.length == 8
cells[i] is in {0, 1}
1 <= N <= 10^9




HINT TO SOLVE : There will be a pattern that will repeat after N days. No need to loop through entire N.
Create a hashset and check if the pattern was seen before.
If the pattern was found then get the length of hashset.
Only loop through N%(len(hashset))


public class Solution 
{
    public int[] nextDay(int[] cells)
    {
        int[] result = new int[cells.Count()];
        for(int i = 1; i<cells.Count()-1; ++i)
        {
            result[i] = cells[i-1] == cells[i+1] ? 1:0;
        }
        return result;
    }
    
    public int[] PrisonAfterNDays(int[] cells, int N) 
    {
        bool hasCycle = false;
        HashSet<string> seenCell = new HashSet<string>();
        
        for(int i = 0; i<N; ++i)
        {
            int[] next = nextDay(cells);
            string key = String.Join(",", next.Select(p => p.ToString()).ToArray());
            //Console.WriteLine(key);

            if(seenCell.Contains(key))
            {
                hasCycle = true;
                break;
            }
            else
            {
                seenCell.Add(key);
            }
            
            cells = next;
        }
        
        
        
        if(hasCycle == true)
        {
            int remainingRotation = N%seenCell.Count();
            Console.WriteLine("Cycle found, hence rotating only for the remainder: "+ remainingRotation);
            for(int i = 0; i<remainingRotation; ++i)
            {
                int[] temp = nextDay(cells);
                cells = temp;
            }
        }
        
        return cells;
    }
}