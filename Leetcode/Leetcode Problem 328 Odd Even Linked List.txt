328. Odd Even Linked List
Given a singly linked list, group all odd nodes together followed by the even nodes. Please note here we are talking about the node number and not the value in the nodes.

You should try to do it in place. The program should run in O(1) space complexity and O(nodes) time complexity.

Example 1:

Input: 1->2->3->4->5->NULL
Output: 1->3->5->2->4->NULL
Example 2:

Input: 2->1->3->5->6->4->7->NULL
Output: 2->3->6->7->1->5->4->NULL
Note:

The relative order inside both the even and odd groups should remain as it was in the input.
The first node is considered odd, the second node even and so on ...



# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    
    def debugList(self, head: ListNode)->None:
        while head != None:
            print(head.val, end=" ")
            head = head.next
    
    def method_1(self, head: ListNode)->ListNode:
        result = head
        if head == None or head.next == None:
            return head
        
        oddNodeStart = head
        oddNode = head
        
        evenNodeStart = head.next
        evenNode = head.next
        
        currentNode = evenNode.next
        
        isOdd = True
        while currentNode != None:
            #print (" CurrentNode: ", currentNode.val)
            temp = currentNode.next
            if isOdd == True:
                oddNode.next = currentNode
                oddNode = currentNode
                oddNode.next = evenNodeStart
                evenNode.next = None
                currentNode = temp
                isOdd = False
            else:
                evenNode.next = currentNode
                evenNode = currentNode
                currentNode = temp
                isOdd = True
            #self.debugList(result)
        
        return result
    
    def method_2(self, head:ListNode) -> ListNode:
        
        if head == None or head.next == None:
            return head
        
        result = head
        
        odd = head
        even = head.next
        evenStart = even
        
        while even != None and even.next != None:
            odd.next = odd.next.next
            even.next = even.next.next
            odd = odd.next
            even = even.next
        
        odd.next = evenStart
        
        return result
            
    
    def oddEvenList(self, head: ListNode) -> ListNode:
        # return self.method_1(head)
        return self.method_2(head)