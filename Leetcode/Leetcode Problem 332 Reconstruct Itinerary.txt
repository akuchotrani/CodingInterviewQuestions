
332. Reconstruct Itinerary
Given a list of airline tickets represented by pairs of departure and arrival airports [from, to], reconstruct the itinerary in order. All of the tickets belong to a man who departs from JFK. Thus, the itinerary must begin with JFK.

Note:

If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string. For example, the itinerary ["JFK", "LGA"] has a smaller lexical order than ["JFK", "LGB"].
All airports are represented by three capital letters (IATA code).
You may assume all tickets form at least one valid itinerary.
Example 1:

Input: [["MUC", "LHR"], ["JFK", "MUC"], ["SFO", "SJC"], ["LHR", "SFO"]]
Output: ["JFK", "MUC", "LHR", "SFO", "SJC"]
Example 2:

Input: [["JFK","SFO"],["JFK","ATL"],["SFO","ATL"],["ATL","JFK"],["ATL","SFO"]]
Output: ["JFK","ATL","JFK","SFO","ATL","SFO"]
Explanation: Another possible reconstruction is ["JFK","SFO","ATL","JFK","ATL","SFO"].
             But it is larger in lexical order.


Hint to solve: sort the tickets by arrival
Create a dictionary of key departure and list of arrival.
Recurse from the 'JFK' until all the arrival are visited form a destination.
Append the destination.
Reverse the answer.


class Solution:
    def findItinerary(self, tickets: List[List[str]]) -> List[str]:
        fromToDictionary = {}
        
        #Sort by destination lexiographically
        tickets = sorted(tickets, key = lambda x:x[-1])
        
        for ticket in tickets:
            departure = ticket[0]
            arrival = ticket[1]
            if departure in fromToDictionary:
                fromToDictionary[departure].append(arrival)
            else:
                fromToDictionary[departure] = [arrival]
        print(fromToDictionary)
        
        itinearary = []
        def constructItinerary(departure):
            while departure in fromToDictionary and fromToDictionary[departure]:
                arrival = fromToDictionary[departure].pop(0)
                constructItinerary(arrival)
            itinearary.append(departure)

        constructItinerary('JFK')
        
        return itinearary[::-1]