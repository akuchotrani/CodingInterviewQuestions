70. Climbing Stairs
You are climbing a stair case. It takes n steps to reach to the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

Note: Given n will be a positive integer.

Example 1:

Input: 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step


Hint: Fibonnaci series. Optimize with Dynamic programming.

public class Solution 
{
    public int ClimbStairsRecursive(int n, ref Dictionary<int,int> myDict)
    {
        if(myDict.ContainsKey(n))
            return myDict[n];
        
        if(n == 0)
            return 1;
        
        if(n < 0)
            return 0;
        
        int ways = ClimbStairsRecursive(n-1,ref myDict) + ClimbStairsRecursive(n-2,ref myDict);
        
        if(myDict.ContainsKey(n) == false)
            myDict.Add(n,ways);
        
        return ways;
    }
    
    
    public int ClimbStairs(int n) 
    {
        Dictionary<int,int> myDict = new Dictionary<int,int>();

        int ways = ClimbStairsRecursive(n,ref myDict);
        return ways;
    }
}