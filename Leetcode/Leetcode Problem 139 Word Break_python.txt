
139. Word Break


Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a space-separated sequence of one or more dictionary words.

Note:

The same word in the dictionary may be reused multiple times in the segmentation.
You may assume the dictionary does not contain duplicate words.
Example 1:

Input: s = "leetcode", wordDict = ["leet", "code"]
Output: true
Explanation: Return true because "leetcode" can be segmented as "leet code".
Example 2:

Input: s = "applepenapple", wordDict = ["apple", "pen"]
Output: true
Explanation: Return true because "applepenapple" can be segmented as "apple pen apple".
             Note that you are allowed to reuse a dictionary word.
Example 3:

Input: s = "catsandog", wordDict = ["cats", "dog", "sand", "and", "cat"]
Output: false




Hint to solve: Use dynamic programming. 
Create a bool array of length S+1
Set index 0 to True since empty string can always be formed from any dictionary

Core logic: Keep increasing length of the string
Check if the current substring of length is present in the dictionary and previous words are already present by checking the Dp Array.
The last index would tell whether all the words were present in the dictionary.





class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        
        dpArray = [False] * (len(s) + 1)
        #Empty string 
        dpArray[0] = True
        
        for wordLength in range(1,len(dpArray)):
            for temp in range(0, wordLength):
                if(dpArray[temp] and s[temp:wordLength] in wordDict):
                    dpArray[wordLength] = True
                    break
                    
        return dpArray[len(s)]