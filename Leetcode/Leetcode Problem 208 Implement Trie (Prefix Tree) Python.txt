208. Implement Trie (Prefix Tree)
Implement a trie with insert, search, and startsWith methods.

Example:

Trie trie = new Trie();

trie.insert("apple");
trie.search("apple");   // returns true
trie.search("app");     // returns false
trie.startsWith("app"); // returns true
trie.insert("app");   
trie.search("app");     // returns true
Note:

You may assume that all inputs are consist of lowercase letters a-z.
All inputs are guaranteed to be non-empty strings.



class TrieNode:
    def __init__(self):
        self.dictionary = {}
        self.isEndOfWord = False


class Trie:

    def __init__(self):
        self.root = TrieNode()

    def insert(self, word: str) -> None:
        currentNode = self.root
        
        for alphabet in word:
            if alphabet in currentNode.dictionary:
                currentNode = currentNode.dictionary[alphabet]
            else:
                createdNode = TrieNode()
                currentNode.dictionary[alphabet] = createdNode
                currentNode = createdNode
                
        currentNode.isEndOfWord = True
        

    def search(self, word: str) -> bool:
        
        currentNode = self.root
        for alphabet in word:
            if alphabet in currentNode.dictionary:
                currentNode = currentNode.dictionary[alphabet]
            else:
                return False
            
        return currentNode.isEndOfWord
        

    def startsWith(self, prefix: str) -> bool:
        currentNode = self.root
        for alphabet in prefix:
            if alphabet in currentNode.dictionary:
                currentNode = currentNode.dictionary[alphabet]
            else:
                return False
        return True
        


# Your Trie object will be instantiated and called as such:
# obj = Trie()
# obj.insert(word)
# param_2 = obj.search(word)
# param_3 = obj.startsWith(prefix)