669. Trim a Binary Search Tree
Given a binary search tree and the lowest and highest boundaries as L and R, trim the tree so that all its elements lies in [L, R] (R >= L). You might need to change the root of the tree, so the result should return the new root of the trimmed binary search tree.

Example 1:
Input:
    1
   / \
  0   2

  L = 1
  R = 2

Output:
    1
      \
       2
Example 2:
Input:
    3
   / \
  0   4
   \
    2
   /
  1

  L = 1
  R = 3

Output:
      3
     /
   2
  /
 1



Hint to solve: ask the trim function which should be the left child.
ask the trim function which should be the right child.

logic : if the root value is less than L return right subtree
if the root value is greater than R return the left subtree


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode TrimBST(TreeNode root, int L, int R)
    {
        if(root == null)
            return null;

        //What value should I put in the left node.
        //Let me ask the trim bst left sub tree
        root.left = TrimBST(root.left, L, R);

        //What value should I put in the right node.
        //Let me ask the trim bst right sub tree
        root.right = TrimBST(root.right,L,R);

        //Main core implementation logic.
        if(root.val < L)
            return root.right;
        else if(root.val > R)
            return root.left;

        return root;
    }
}
