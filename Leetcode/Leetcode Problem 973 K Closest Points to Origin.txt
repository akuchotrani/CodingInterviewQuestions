973. K Closest Points to Origin
We have a list of points on the plane.  Find the K closest points to the origin (0, 0).

(Here, the distance between two points on a plane is the Euclidean distance.)

You may return the answer in any order.  The answer is guaranteed to be unique (except for the order that it is in.)

 

Example 1:

Input: points = [[1,3],[-2,2]], K = 1
Output: [[-2,2]]
Explanation: 
The distance between (1, 3) and the origin is sqrt(10).
The distance between (-2, 2) and the origin is sqrt(8).
Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.
We only want the closest K = 1 points from the origin, so the answer is just [[-2,2]].
Example 2:

Input: points = [[3,3],[5,-1],[-2,4]], K = 2
Output: [[3,3],[-2,4]]
(The answer [[-2,4],[3,3]] would also be accepted.)
 

Note:

1 <= K <= points.length <= 10000
-10000 < points[i][0] < 10000
-10000 < points[i][1] < 10000


Hint to solve: Calculate distance and push it to the heap if the distance is less than the max heap top.


import heapq
class Solution:
    
    def CalculateDistance(self, point):
        x = point[0]
        y = point[1]
        return math.sqrt(x*x + y*y)
    
    def kClosest(self, points: List[List[int]], K: int) -> List[List[int]]:
        myPQ = []
        
        for point in points:
            distance = self.CalculateDistance(point)
            if len(myPQ) < K:
                heapq.heappush(myPQ, (-distance, point))
            else:
                if distance < abs(myPQ[0][0]):
                    heapq.heappop(myPQ)
                    heapq.heappush(myPQ, (-distance, point))
            
        
        result = []
        while len(myPQ) > 0:
            temp = heapq.heappop(myPQ)
            result.append(temp[1])
        
        return result