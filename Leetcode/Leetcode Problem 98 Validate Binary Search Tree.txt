98. Validate Binary Search Tree
Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
 

Example 1:

    2
   / \
  1   3

Input: [2,1,3]
Output: true
Example 2:

    5
   / \
  1   4
     / \
    3   6

Input: [5,1,4,null,null,3,6]
Output: false
Explanation: The root node's value is 5 but its right child's value is 4.
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution 
{
    public bool IsValidRecursive(TreeNode currentNode, long range_low, long range_high)
    {
        if(currentNode == null)
            return true;
    
        if(currentNode.val > range_low && currentNode.val < range_high)
        {
            
            if(currentNode.left != null)
            {
                bool isValid = IsValidRecursive(currentNode.left, range_low ,Math.Min(range_high, currentNode.val));
                if(isValid == false)
                    return false;
            }
            
            if(currentNode.right != null)
            {
                bool isValid = IsValidRecursive(currentNode.right,Math.Max(range_low,currentNode.val), range_high);
                if(isValid == false)
                    return false;
            }
            
            return true;
        }
        else
        {
            return false;
        }
    }
    
    public bool IsValidBST(TreeNode root) 
    {
        if(root == null)
        {
            return true;
        }
        return IsValidRecursive(root,long.MinValue, long.MaxValue);
    }
}