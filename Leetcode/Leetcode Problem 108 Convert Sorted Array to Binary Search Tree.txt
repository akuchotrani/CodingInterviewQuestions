108. Convert Sorted Array to Binary Search Tree
Given an array where elements are sorted in ascending order, convert it to a height balanced BST.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

Example:

Given the sorted array: [-10,-3,0,5,9],

One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:

      0
     / \
   -3   9
   /   /
 -10  5


Hint to solve: Calculate the mid element in the recursive call.


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    
    
    def constructRecusiveBST(self, nums, start, end):
        if(start > end):
            return None
        
        mid = (int)((start+end)/2)
        #print(F"start: {start} mid:{mid} end:{end} currentElement:{nums[mid]}")

        currentNode = TreeNode(nums[mid])
        currentNode.left = self.constructRecusiveBST(nums, start, mid-1)
        currentNode.right = self.constructRecusiveBST(nums, mid+1, end)
        
        return currentNode
    
    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:
        return self.constructRecusiveBST(nums, 0, len(nums)-1)